# proxy_cache_path /tmp/nginx-thumbnails levels=1:2 keys_zone=thumbnail_cache:16M inactive=60d max_size=200M;

# // You can do fastcgi caching in nginx rather than a proxy nginx cache server (if you access this directly)
fastcgi_cache_path /tmp/nginx-thumbnails levels=1:2 keys_zone=php_dynamic_image:256M inactive=1440m max_size=512M;

# Raw Image Server
server {
    listen                      80;
    server_name                 _;

    error_log                   /dev/stderr notice;
    access_log                  /dev/stdout main;

    root                        /usr/share/nginx/html;
    index                       index.html index.htm;

    # Announce the server is up
    location ^/$ {
        default_type            application/json;
        access_log              off;
        return                  200 '{ "status": "ok" }';
    }

    # Return 'No Content' for favicon.ico
    location /favicon.ico {
        access_log              off;
        return                  204;
    }

    # Return 'No Content' for keepalive
    location /keepalive {
        access_log              off;
        return                  204;
    }

    # Return a quick 'ping' for pings, exactly like php-fpm
    location /ping {
        default_type            text/plain;
        access_log              off;
        return                  200 'pong';
    }

    # Pass php-fpm/status or php-fpm/ping to the backend
    location ~ ^/php-fpm/(status|ping)$ {
        access_log              off;
        allow                   127.0.0.1;
        allow                   172.16.0.0/12;
        deny                    all;
        include                 fastcgi_params;
        fastcgi_param           SCRIPT_FILENAME $fastcgi_script_name;
        fastcgi_param           HTTP_PROXY "";
        fastcgi_pass            php:9000;
    }

    # Permit Lets-Encrypt handling
    location ^~ /.well-known {
        allow                   all;
        auth_basic              off;
    }

    # Process requests naturally (e.g. http://localhost/filename.png)
    rewrite                     ^(.*\.[jp][pn]g)\??(.*)?$
                                /index.html?file=$1$3
                                last;

    # /usr/share/nginx/html/index.html exists in the nginx container. This prevents nginx from issuing a 404.
    # We don't care about that file, we just need it to exist, because the backend actually has the php code.
    # When calling php-fpm, nginx first checks to see if the file exists locally (nginx:/usr/share/nginx/html/index.html),
    # then passes the SCRIPT_FILENAME to php-fpm for processing. It is php-fpm's responsibility to read and process
    # the file.  Since the php container HAS the php code, it reads and processes correctly.

    # Pass calls into index.html to the backend.
    location /index.html {
        fastcgi_pass            php:9000;
        fastcgi_index           index.php;
        fastcgi_param           SCRIPT_FILENAME /var/www/html/index.php; # Within the PHP container, the file is in /var/www/html/
        fastcgi_param           SCRIPT_NAME /index.php;
        fastcgi_param           HTTP_PROXY "";

        fastcgi_cache           php_dynamic_image;
        fastcgi_cache_key       "$request";
        fastcgi_cache_valid     200 15m;

        # Add some headers
        add_header              X-Cache-Key "$request"; # Should be equal to 'fastcgi_cache_key' for diagnostics
        add_header              X-Cache-Status $upstream_cache_status;
        add_header              Cache-Control "public";

        # Ignore the following incoming Headers
        fastcgi_ignore_headers    Expires;
        fastcgi_ignore_headers    X-Accel-Expires;
        fastcgi_ignore_headers    Cache-Control;
        fastcgi_ignore_headers    Set-Cookie;

        # Ensure the following Headers are NOT in the outgoing response
        fastcgi_hide_header       Set-Cookie;

        # How and When to Recache
        fastcgi_cache_use_stale         error timeout invalid_header updating; # When to use stale content
        fastcgi_cache_background_update on;  # Update in the background for stale content?
        fastcgi_cache_lock              on;  # Prevent multiple requests to backend
        fastcgi_cache_lock_timeout      2s;  # Send to backend if lock does not resolve within time
        fastcgi_cache_revalidate        on;  # Enable revalidation of content

        include                 fastcgi_params;
    }

    # Bounce everything else as a 404, no hacking please
    location / {
        default_type            application/json;
        access_log              off;
        return                  404 '{ "status": "not found" }';
    }

}